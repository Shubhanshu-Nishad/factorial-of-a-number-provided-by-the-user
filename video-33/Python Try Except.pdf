Python Try Except


The try block lets you test a block of code for errors.

The except block lets you handle the error.


Exception Handling
When an error occurs, or exception as we call it, Python will normally stop and generate an error message.

These exceptions can be handled using the try statement:
Example
The try block will generate an exception, because x is not defined:
try:
  print(x)
except:
  print("An exception occurred")

Since the try block raises an error, the except block will be executed.
Without the try block, the program will crash and raise an error:
Example
This statement will raise an error, because x is not defined:
print(x)


Many Exceptions
You can define as many exception blocks as you want, e.g. if you want to execute a special block of code for a special kind of error:
Example
Print one message if the try block raises a NameError and another for other errors:

try:
  print(x)
except NameError:
  print("Variable x is not defined")
except:
  print("Something else went wrong")

Else
You can use the else keyword to define a block of code to be executed if no errors were raised:
Example
In this example, the try block does not generate any error:
try:
  print("Hello")
except:
  print("Something went wrong")
else:
  print("Nothing went wrong")

Question - A python script to take correct input from users using try and except syntax.
t=1
while t==1:
    try:
        a = int(input('Enter the first number'))
        b = int(input('Enter the second number'))
        # print(x)
        print(a/b)
        t=2 # change the value of t, so that loop will ended .
    except NameError:
        print("Name is not define ")
    except:
        print('Sorry , Wrong Input ')
        print('Enter only integer ')
        t=1 # for continue the loop so that it would take correct input from users


